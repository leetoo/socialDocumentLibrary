apply plugin: 'propdeps'

apply plugin: "sonar-runner"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'

        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

version = '2.0.0-SNAPSHOT'
group = 'it.valeriovaudi.documentlibrary'

def dockerImagePrefix="social-document-library"
def dockerImageName="admin-documentlibrary-client"

jar {
    archiveName="adminDocumentLibraryClient.jar"
    baseName = '$dockerImageName'
}

configurations {
    deployerJars
}

compileJava.dependsOn(processResources)

//archivesBaseName = jar.baseName;

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://repo.spring.io/plugins-release' }
}

dependencies {
    compile("org.springframework.cloud:spring-cloud-starter")
    compile("org.springframework.cloud:spring-cloud-starter-eureka")
    compile("org.springframework.cloud:spring-cloud-starter-hystrix")
    compile("org.springframework.cloud:spring-cloud-starter-ribbon")
    compile("org.springframework.cloud:spring-cloud-starter-feign")
    compile("org.springframework.cloud:spring-cloud-starter-zuul")

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework:spring-messaging")
    compile("io.projectreactor:reactor-core")
    compile("io.projectreactor:reactor-net")
    compile("io.netty:netty-all:4.0.30.Final")

    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.integration:spring-integration-jms")
    compile("org.springframework.integration:spring-integration-java-dsl:1.1.0.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile 'org.apache.httpcomponents:httpclient'
    compile 'mysql:mysql-connector-java:5.1.22'

    compile("org.apache.activemq:activemq-client:5.10.0")

    compile("org.webjars:jquery:1.11.1")
    compile("org.webjars:bootstrap:3.3.4")

    compile("org.webjars:select2:3.5.2")
    compile("org.webjars:select2-bootstrap-css:1.3.1")
    compile("org.webjars.bower:bootstrap-filestyle:1.1.2")
    compile("org.webjars.bower:stomp-websocket:2.3.4")
    compile("org.webjars.bower:sockjs-client:0.3.4")

    compile("org.webjars:angularjs:1.3.15")
    compile("org.webjars.bower:ui-select:0.11.2")

    compile("javax.json:javax.json-api:1.0")
    compile("org.glassfish:javax.json:1.0.4")
    compile("it.valeriovaudi:common-validator:1.0-SNAPSHOT")
    compile "org.projectlombok:lombok:1.16.8"

//    optional "org.springframework.boot:spring-boot-configuration-processor"

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.h2database:h2")
}



dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE"
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}


import org.apache.tools.ant.filters.ReplaceTokens

def searchBookServiceServerLocation = 'http://search-book-service';
def bookRepositoryServiceServerLocation = 'http://book-repository-service';

def adminDocumentlibraryClientServerLocation = 'http://localhost:7070';

processResources {
    def mappings = ["book-repository-service.bookServiceEndPoint.baseUrl":bookRepositoryServiceServerLocation+"/bookService",
                    "search-book-service.searchBookService.baseUrl":searchBookServiceServerLocation + "/searchBookIndex",
                    "search-book-service.searchMetadaTagService.baseUrl":searchBookServiceServerLocation + "/searchMetadaTag",
                    "admin-documentlibrary-client.bookServiceEndPoint.baseUrl":adminDocumentlibraryClientServerLocation+"/bookService",
                    "admin-documentlibrary-client.serverLocation":adminDocumentlibraryClientServerLocation];
    filesMatching("**/*.properties") {
        filter(ReplaceTokens, tokens:mappings)
    }
    filesMatching("**/*.js") {
        filter(ReplaceTokens, tokens:mappings)
    }
    filesMatching("**/*.css") {
        filter(ReplaceTokens, tokens:mappings)
    }
}

task buildDocker(type: Docker, dependsOn: build) {
//    push = true

    baseImage = "$dockerImagePrefix"
    applicationName = "$dockerImageName"
    tagVersion = "lastest"

    tag  = "$baseImage/$applicationName"

    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}


sonarRunner {
    sonarProperties {
//        coberturaReportPath = file("$buildDir/reports/cobertura/cobertura.xml")
//        property "sonar.surefire.reportsPath","$buildDir/test-results"
    }
}